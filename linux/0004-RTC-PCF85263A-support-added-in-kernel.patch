From 0a790f4ed81a4ef81888434245c33505daafe7b6 Mon Sep 17 00:00:00 2001
From: Gaurang Khodifad <gaurang.khodifad@volansystech.com>
Date: Wed, 27 Dec 2017 17:04:50 +0530
Subject: [PATCH] RTC PCF85263A support added in kernel

Signed-off-by: Gaurang Khodifad <gaurang.khodifad@volansystech.com>
---
 drivers/rtc/Kconfig        |   9 ++
 drivers/rtc/Makefile       |   1 +
 drivers/rtc/rtc-pcf85263.c | 308 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 318 insertions(+)
 create mode 100644 drivers/rtc/rtc-pcf85263.c

diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index e859d14..6094e2d 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -406,6 +406,15 @@ config RTC_DRV_PCF8523
 	  This driver can also be built as a module. If so, the module
 	  will be called rtc-pcf8523.
 
+config RTC_DRV_PCF85263
+	tristate "NXP PCF85263"
+	help
+	  If you say yes here you get support for the NXP PCF85263 RTC
+	  chips.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called rtc-pcf85263.
+
 config RTC_DRV_PCF85063
 	tristate "NXP PCF85063"
 	help
diff --git a/drivers/rtc/Makefile b/drivers/rtc/Makefile
index 1ac694a..0e195d1 100644
--- a/drivers/rtc/Makefile
+++ b/drivers/rtc/Makefile
@@ -95,6 +95,7 @@ obj-$(CONFIG_RTC_DRV_MAX8998)	+= rtc-max8998.o
 obj-$(CONFIG_RTC_DRV_MC13XXX)	+= rtc-mc13xxx.o
 obj-$(CONFIG_RTC_DRV_MCP795)	+= rtc-mcp795.o
 obj-$(CONFIG_RTC_DRV_MOXART)	+= rtc-moxart.o
+obj-$(CONFIG_RTC_DRV_PCF85263)	+= rtc-pcf85263.o
 obj-$(CONFIG_RTC_DRV_MPC5121)	+= rtc-mpc5121.o
 obj-$(CONFIG_RTC_DRV_VRTC)	+= rtc-mrst.o
 obj-$(CONFIG_RTC_DRV_MSM6242)	+= rtc-msm6242.o
diff --git a/drivers/rtc/rtc-pcf85263.c b/drivers/rtc/rtc-pcf85263.c
new file mode 100644
index 0000000..8e6151d
--- /dev/null
+++ b/drivers/rtc/rtc-pcf85263.c
@@ -0,0 +1,308 @@
+/*
+ * Copyright (C) 2016 Volansys Technologies
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/bcd.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/rtc.h>
+#include <linux/of.h>
+
+#define DRIVER_NAME "rtc-pcf85263"
+
+#define REG_CONTROL_OSCI	0x25
+#define OSCI_CAP_7PF		0x00
+#define OSCI_CAP_6PF		0x01			
+#define OSCI_CAP_12_5PF		0x02  /* 0x03 */
+
+#define REG_CONTROL_OSCI_CAP_SEL OSCI_CAP_12_5PF
+
+#define REG_STOP 	0x2E
+#define RTC_STOP 	0x01
+
+#define REG_SECONDS  0x01
+#define REG_SECONDS_OS (1 << 7)
+
+#define REG_MINUTES  0x02
+#define REG_HOURS    0x03
+#define REG_DAYS     0x04
+#define REG_WEEKDAYS 0x05
+#define REG_MONTHS   0x06
+#define REG_YEARS    0x07
+
+struct pcf85263 {
+	struct rtc_device *rtc;
+};
+
+static int pcf85263_read(struct i2c_client *client, u8 reg, u8 *valuep)
+{
+	struct i2c_msg msgs[2];
+	u8 value = 0;
+	int err;
+
+	msgs[0].addr = client->addr;
+	msgs[0].flags = 0;
+	msgs[0].len = sizeof(reg);
+	msgs[0].buf = &reg;
+
+	msgs[1].addr = client->addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = sizeof(value);
+	msgs[1].buf = &value;
+
+	err = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (err < 0)
+		return err;
+
+	*valuep = value;
+
+	return 0;
+}
+
+static int pcf85263_write(struct i2c_client *client, u8 reg, u8 value)
+{
+	u8 buffer[2] = { reg, value };
+	struct i2c_msg msg;
+	int err;
+
+	msg.addr = client->addr;
+	msg.flags = 0;
+	msg.len = sizeof(buffer);
+	msg.buf = buffer;
+
+	err = i2c_transfer(client->adapter, &msg, 1);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static int pcf85263_select_capacitance(struct i2c_client *client)
+{
+	u8 value;
+	int err;
+
+	err = pcf85263_read(client, REG_CONTROL_OSCI, &value);
+	if (err < 0)
+		return err;
+
+	value |= REG_CONTROL_OSCI_CAP_SEL;
+
+
+	err = pcf85263_write(client, REG_CONTROL_OSCI, value);
+	if (err < 0)
+		return err;
+
+	return err;
+}
+
+static int pcf85263_stop_rtc(struct i2c_client *client)
+{
+	u8 value;
+	int err;
+
+	err = pcf85263_read(client, REG_STOP, &value);
+	if (err < 0)
+		return err;
+
+	value |= RTC_STOP;
+
+	err = pcf85263_write(client, REG_STOP, value);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static int pcf85263_start_rtc(struct i2c_client *client)
+{
+	u8 value;
+	int err;
+
+	err = pcf85263_read(client, REG_STOP, &value);
+	if (err < 0)
+		return err;
+
+	value &= ~RTC_STOP;
+
+	err = pcf85263_write(client, REG_STOP, value);
+	if (err < 0)
+		return err;
+
+	return 0;
+}
+
+static int pcf85263_rtc_read_time(struct device *dev, struct rtc_time *tm)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	u8 start = REG_SECONDS, regs[7];
+	struct i2c_msg msgs[2];
+	int err;
+
+	msgs[0].addr = client->addr;
+	msgs[0].flags = 0;
+	msgs[0].len = 1;
+	msgs[0].buf = &start;
+
+	msgs[1].addr = client->addr;
+	msgs[1].flags = I2C_M_RD;
+	msgs[1].len = sizeof(regs);
+	msgs[1].buf = regs;
+
+	err = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	if (err < 0)
+		return err;
+
+	if (regs[0] & REG_SECONDS_OS) {
+		/*
+		 * If the oscillator was stopped, try to clear the flag. Upon
+		 * power-up the flag is always set, but if we cannot clear it
+		 * the oscillator isn't running properly for some reason. The
+		 * sensible thing therefore is to return an error, signalling
+		 * that the clock cannot be assumed to be correct.
+		 */
+
+		regs[0] &= ~REG_SECONDS_OS;
+
+		err = pcf85263_write(client, REG_SECONDS, regs[0]);
+		if (err < 0)
+			return err;
+
+		err = pcf85263_read(client, REG_SECONDS, &regs[0]);
+		if (err < 0)
+			return err;
+
+		if (regs[0] & REG_SECONDS_OS)
+			return -EAGAIN;
+	}
+
+	tm->tm_sec = bcd2bin(regs[0] & 0x7f);
+	tm->tm_min = bcd2bin(regs[1] & 0x7f);
+	tm->tm_hour = bcd2bin(regs[2] & 0x3f);
+	tm->tm_mday = bcd2bin(regs[3] & 0x3f);
+	tm->tm_wday = regs[4] & 0x7;
+	tm->tm_mon = bcd2bin(regs[5] & 0x1f);
+	tm->tm_year = bcd2bin(regs[6]) + 100;
+	
+	return rtc_valid_tm(tm);
+}
+
+static int pcf85263_rtc_set_time(struct device *dev, struct rtc_time *tm)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct i2c_msg msg;
+	u8 regs[8];
+	int err;
+
+	err = pcf85263_stop_rtc(client);
+	if (err < 0)
+		return err;
+
+	regs[0] = REG_SECONDS;
+	regs[1] = bin2bcd(tm->tm_sec);
+	regs[2] = bin2bcd(tm->tm_min);
+	regs[3] = bin2bcd(tm->tm_hour);
+	regs[4] = bin2bcd(tm->tm_mday);
+	regs[5] = tm->tm_wday;
+	regs[6] = bin2bcd(tm->tm_mon);
+	regs[7] = bin2bcd(tm->tm_year - 100);
+
+	msg.addr = client->addr;
+	msg.flags = 0;
+	msg.len = sizeof(regs);
+	msg.buf = regs;
+
+	err = i2c_transfer(client->adapter, &msg, 1);
+	if (err < 0) {
+		/*
+		 * If the time cannot be set, restart the RTC anyway. Note
+		 * that errors are ignored if the RTC cannot be started so
+		 * that we have a chance to propagate the original error.
+		 */
+		pcf85263_start_rtc(client);
+		printk("Failed to set RTC time, restart RTC\n");
+		return err;
+	}
+
+	return pcf85263_start_rtc(client);
+}
+
+#ifdef CONFIG_RTC_INTF_DEV
+static int pcf85263_rtc_ioctl(struct device *dev, unsigned int cmd,
+			     unsigned long arg)
+{
+	switch (cmd) {
+	default:
+		return -ENOIOCTLCMD;
+	}
+}
+#else
+#define pcf85263_rtc_ioctl NULL
+#endif
+
+static const struct rtc_class_ops pcf85263_rtc_ops = {
+	.read_time = pcf85263_rtc_read_time,
+	.set_time = pcf85263_rtc_set_time,
+	.ioctl = pcf85263_rtc_ioctl,
+};
+
+static int pcf85263_probe(struct i2c_client *client,
+			 const struct i2c_device_id *id)
+{
+	struct pcf85263 *pcf;
+	int err;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+
+	pcf = devm_kzalloc(&client->dev, sizeof(*pcf), GFP_KERNEL);
+	if (!pcf)
+		return -ENOMEM;
+
+	err = pcf85263_select_capacitance(client);
+	if (err < 0)
+		return err;
+
+	pcf->rtc = devm_rtc_device_register(&client->dev, DRIVER_NAME,
+				       &pcf85263_rtc_ops, THIS_MODULE);
+	if (IS_ERR(pcf->rtc))
+		return PTR_ERR(pcf->rtc);
+
+	i2c_set_clientdata(client, pcf);
+	printk("RTC driver probe done\n");
+
+	return 0;
+}
+
+static const struct i2c_device_id pcf85263_id[] = {
+	{ "pcf85263", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, pcf85263_id);
+
+#ifdef CONFIG_OF
+static const struct of_device_id pcf85263_of_match[] = {
+	{ .compatible = "nxp,pcf85263" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, pcf85263_of_match);
+#endif
+
+static struct i2c_driver pcf85263_driver = {
+	.driver = {
+		.name = DRIVER_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(pcf85263_of_match),
+	},
+	.probe = pcf85263_probe,
+	.id_table = pcf85263_id,
+};
+module_i2c_driver(pcf85263_driver);
+
+MODULE_AUTHOR("Dhvanil Patel");
+MODULE_DESCRIPTION("NXP PCF85263 RTC driver");
+MODULE_LICENSE("GPL v2");
-- 
1.9.1

